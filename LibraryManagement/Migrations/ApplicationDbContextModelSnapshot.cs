// <auto-generated />
using System;
using LibraryManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryManagement.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryManagement.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("BookId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Author = "Åsa Jakobsson",
                            ISBN = "978-91-9845-302-7",
                            Publisher = "Klickerförlaget",
                            Title = "Vardagsträning med klicker"
                        },
                        new
                        {
                            BookId = 2,
                            Author = "Kyra Sundance & Chalcy",
                            ISBN = "978-91-7783-674-2",
                            Publisher = "Tucan förlag",
                            Title = "101 Hundtrick"
                        },
                        new
                        {
                            BookId = 3,
                            Author = "Sophie Collins",
                            ISBN = "978-91-7861-610-7",
                            Publisher = "Lindco",
                            Title = "Hjärngympa för hundar"
                        },
                        new
                        {
                            BookId = 4,
                            Author = "Per Jensen",
                            ISBN = "978-91-27-15187-1",
                            Publisher = "Natur & Kultur",
                            Title = "Den missförstådda hunden"
                        },
                        new
                        {
                            BookId = 5,
                            Author = "Per Jensen",
                            ISBN = "978-91-27-13108-8",
                            Publisher = "Natur & Kultur",
                            Title = "Hundens språk och tankar"
                        },
                        new
                        {
                            BookId = 6,
                            Author = "Kenth Svartberg",
                            ISBN = "978-91-978158-2-6",
                            Publisher = "Svartbergs Hundkunskap",
                            Title = "Bra relation"
                        },
                        new
                        {
                            BookId = 7,
                            Author = "Kerstin Malm och Malin Avenius",
                            ISBN = "978-9163989919",
                            Publisher = "AH Books",
                            Title = "Lär känna din hund - och dig själv"
                        },
                        new
                        {
                            BookId = 8,
                            Author = "Eva Bodfäldt",
                            ISBN = "978-91-973578-7-6",
                            Publisher = "Eva Bodfäldt Education AB",
                            Title = "Kontakt kontraktet"
                        },
                        new
                        {
                            BookId = 9,
                            Author = "Anders Hallgren",
                            ISBN = "978-91-6393-834-4",
                            Publisher = "AH Books",
                            Title = "Nyckeln till lycka - att motverka social stress hos hundar"
                        });
                });

            modelBuilder.Entity("LibraryManagement.Models.BorrowHistory", b =>
                {
                    b.Property<int>("BorrowHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BorrowHistoryId"));

                    b.Property<DateTime?>("ActualReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FkBookId")
                        .HasColumnType("int");

                    b.Property<int>("FkCustomerId")
                        .HasColumnType("int");

                    b.HasKey("BorrowHistoryId");

                    b.HasIndex("FkBookId");

                    b.HasIndex("FkCustomerId");

                    b.ToTable("BorrowHistories");

                    b.HasData(
                        new
                        {
                            BorrowHistoryId = 1,
                            ActualReturnDate = new DateTime(2024, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BorrowDate = new DateTime(2024, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FkBookId = 1,
                            FkCustomerId = 1
                        },
                        new
                        {
                            BorrowHistoryId = 2,
                            ActualReturnDate = new DateTime(2024, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BorrowDate = new DateTime(2024, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FkBookId = 2,
                            FkCustomerId = 2
                        },
                        new
                        {
                            BorrowHistoryId = 3,
                            ActualReturnDate = new DateTime(2024, 4, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BorrowDate = new DateTime(2024, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FkBookId = 3,
                            FkCustomerId = 3
                        },
                        new
                        {
                            BorrowHistoryId = 4,
                            ActualReturnDate = new DateTime(2024, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BorrowDate = new DateTime(2024, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FkBookId = 4,
                            FkCustomerId = 4
                        },
                        new
                        {
                            BorrowHistoryId = 5,
                            ActualReturnDate = new DateTime(2024, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BorrowDate = new DateTime(2024, 3, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FkBookId = 5,
                            FkCustomerId = 5
                        },
                        new
                        {
                            BorrowHistoryId = 6,
                            ActualReturnDate = new DateTime(2024, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BorrowDate = new DateTime(2024, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FkBookId = 6,
                            FkCustomerId = 1
                        },
                        new
                        {
                            BorrowHistoryId = 7,
                            BorrowDate = new DateTime(2024, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FkBookId = 7,
                            FkCustomerId = 2
                        },
                        new
                        {
                            BorrowHistoryId = 8,
                            BorrowDate = new DateTime(2024, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FkBookId = 8,
                            FkCustomerId = 3
                        },
                        new
                        {
                            BorrowHistoryId = 9,
                            BorrowDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FkBookId = 9,
                            FkCustomerId = 5
                        });
                });

            modelBuilder.Entity("LibraryManagement.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            CustomerEmail = "leon@mail.se",
                            CustomerName = "Léon Nahum",
                            CustomerPhone = "070-6233728"
                        },
                        new
                        {
                            CustomerId = 2,
                            CustomerEmail = "andreas@mail.se",
                            CustomerName = "Andreas Fors",
                            CustomerPhone = "072-4421186"
                        },
                        new
                        {
                            CustomerId = 3,
                            CustomerEmail = "nadine@mail.se",
                            CustomerName = "Nadine Marklund",
                            CustomerPhone = "076-6231458"
                        },
                        new
                        {
                            CustomerId = 4,
                            CustomerEmail = "axel@mail.se",
                            CustomerName = "Axel Wennström",
                            CustomerPhone = "072-3664014"
                        },
                        new
                        {
                            CustomerId = 5,
                            CustomerEmail = "miriam@mail.se",
                            CustomerName = "Miriam Nahum",
                            CustomerPhone = "073-8018685"
                        });
                });

            modelBuilder.Entity("LibraryManagement.Models.BorrowHistory", b =>
                {
                    b.HasOne("LibraryManagement.Models.Book", "Book")
                        .WithMany("BorrowHistories")
                        .HasForeignKey("FkBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagement.Models.Customer", "Customer")
                        .WithMany("BorrowHistories")
                        .HasForeignKey("FkCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("LibraryManagement.Models.Book", b =>
                {
                    b.Navigation("BorrowHistories");
                });

            modelBuilder.Entity("LibraryManagement.Models.Customer", b =>
                {
                    b.Navigation("BorrowHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
